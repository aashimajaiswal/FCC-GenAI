# -*- coding: utf-8 -*-
"""cscb.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ex7uWxacFB0sh5JEz5MXBA4CjeRcgElR
"""

!pip install -q langchain langchain-community
!pip install -q pypdf
!pip install -q sentence-transformers
!pip install -q openai
!pip install -q tiktoken
!pip install tokenizers
!pip install faiss-cpu
!pip install unstructured
!pip install numpy
!pip install nltk

import os
import sys
import torch
import textwrap
from langchain.document_loaders import UnstructuredURLLoader
from langchain.text_splitter import CharacterTextSplitter
from langchain.embeddings import OpenAIEmbeddings
from langchain.chat_models import ChatOpenAI
from langchain.vectorstores import FAISS
from langchain.chains import RetrievalQAWithSourcesChain
# from langchain.embeddings import HuggingFaceEmbeddings

import nltk
nltk.download('punkt')
nltk.download('averaged_perceptron_tagger')

os.environ['OPENAI_API_KEY'] = "<key>"

URLS = ['https://www.straitstimes.com/singapore/over-570000-singaporeans-to-get-400-to-1000-in-earn-and-save-bonus-in-march',
        'https://www.straitstimes.com/business/askst-retirement-help-for-s-poreans-7-things-to-know-about-the-majulah-package',
        'https://www.straitstimes.com/singapore/politics/ndr-2023-14-million-singaporeans-aged-50-and-up-to-get-more-help-meeting-retirement-needs',
        'https://www.straitstimes.com/singapore/singapores-population-ageing-rapidly-184-of-citizens-are-65-years-and-older']

# reading the websites
loaders = UnstructuredURLLoader(URLS)
data = loaders.load()

data

# chunking
text_splitter = CharacterTextSplitter(separator='\n', chunk_size=1000, chunk_overlap=200)
text_chunks = text_splitter.split_documents(data)

# embedding
embeddings = OpenAIEmbeddings()

# vector db
vectorstore = FAISS.from_documents(text_chunks, embeddings)

# llm
llm = ChatOpenAI()

llm.predict("Please provide a concise summary of the Book Harry Potter")

chain = RetrievalQAWithSourcesChain.from_llm(llm=llm, retriever=vectorstore.as_retriever())

result = chain({"question": "How much money are Singaporeans going to get from Earn and Save Bonus"}, return_only_outputs = True)

result['answer']

while True:
  query = input(f"Prompt: ")
  if query == 'exit':
    print("Exiting")
    sys.exit()
  if query == "":
    continue
  result = chain({"question": query}, return_only_outputs = True)
  print(f"Answer: " + result["answer"])

